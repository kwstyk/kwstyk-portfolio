---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

import Alert             from '@/components/atoms/Alert.astro';
import CopyBlock         from '@/components/molecules/CopyBlock.astro';
import DirectoryTree     from '@/components/molecules/DirectoryTree.astro';
import ProofPageTemplate from '@/components/templates/ProofPageTemplate.astro';
import { marked }        from 'marked';
import StoryCard         from '@/components/molecules/StoryCard.astro';
import storiesJson       from '@/data/stories.json';

export const prerender = true;

export async function getStaticPaths() {
  const proofs = await getCollection('proofs');

  return proofs.map((entry) => {
    const cleaned = entry.slug.replace(/\/index$/, '');
    // entry.slug 例: "os-hardening/linux-secure-baseline"
    const [category, slug] = cleaned.split('/');

    return {
      params: { category, slug }, // ← ファイル名の動的セグメントと一致！
      props : { entry },
    };
  });
}

type ProofEntry = CollectionEntry<'proofs'>;
interface Props { entry: ProofEntry }

const { entry } = Astro.props as Props;
const { Content } = await entry.render();
const front = entry.data;
const whyModules = import.meta.glob<string>(
  '/src/why/**/*.md',
  { eager: true, import: 'default', query: '?raw' }
);

let whyContent: string | undefined;
if (front.why_md) {
  // front.why_md は "/src/why/network-security/packet-capture.md"
  const raw = (whyModules as Record<string,string>)[front.why_md];
  if (raw) {
    whyContent = await marked.parse(raw);
  }
}

interface Story { id: string; [key: string]: any }
const allStories = storiesJson as Story[];
const relatedStories = (front.stories ?? [])
  .map((sid: string) => allStories.find((s) => s.id === sid))
  .filter(Boolean) as Story[];
---

<ProofPageTemplate
  title       ={front.title}
  description ={front.description}
  category    ={front.category}
  difficulty  ={front.difficulty}
  repro       ={front.repro}
  stack       ={front.stack}
  updated     ={front.updated}
  progress    ={front.progress}
  tags        ={front.tags}
  ci_status   ={front.ci_status}
  whyContent  ={whyContent}
>
  <Content components={{ Alert, CopyBlock, DirectoryTree }} />

  {relatedStories.length > 0 && (
    <div slot="footer" class="mt-12">
      <h2 class="text-2xl font-bold mb-4">Related Stories</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {relatedStories.map((s) => (
          <StoryCard
            title={s.title}
            summary={s.summary}
            url={s.url}
            source={s.source}
            published={s.published}
            {...s}
          />
        ))}
      </div>
    </div>
  )}
</ProofPageTemplate>
