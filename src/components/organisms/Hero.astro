---
interface Button { href: string; variant: string; text: string }
interface Props {
  title?: string
  subtitle?: string
  buttons?: Button[]
  typewriterTexts?: string[]
  enableEffects?: boolean
}
const {
  title = "Growth Lab Portfolio",
  subtitle = "セキュリティ × インフラ × 再現性",
  buttons = [],
  typewriterTexts = ["In-house SE","Cybersecurity Learner","Ex-Construction PM"],
  enableEffects = true,
} = Astro.props as Props
---

<style>
  @keyframes bgShift {
    0%   { background-position: 0% 50%; }
    50%  { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  .hero {
    background: linear-gradient(120deg, #0d1117, #1e2530, #0d1117);
    background-size: 300% 300%;
    animation: bgShift 20s ease infinite;
  }
  @keyframes textGlow {
    0%,100% { text-shadow: 0 0 8px #60cdf9 }
    50%     { text-shadow: 0 0 16px #38bdf8 }
  }
  .glow { animation: textGlow 3s ease-in-out infinite }
  @keyframes blink { 0%,100%{opacity:0} 50%{opacity:1} }
  .animate-blink { animation: blink 1s step-end infinite }
</style>

<section
  class="hero relative overflow-x-hidden"
  style="width:100vw; margin-left:calc(50% - 50vw)"
>
  {enableEffects && (
    <canvas
      id="starfield"
      class="absolute inset-0 w-full h-full"
      aria-hidden="true"
      data-texts={JSON.stringify(typewriterTexts)}
    ></canvas>
  )}

  <div class="relative z-10 max-w-4xl mx-auto px-4 py-24 text-center">
    <slot name="title">
      <h1 class="text-white text-4xl sm:text-6xl font-extrabold tracking-tight glow">
        {title}
      </h1>
    </slot>

    {enableEffects ? (
      <p class="mt-4 text-2xl h-10">
        <span id="typed" class="text-[var(--accent-light,#38bdf8)] font-semibold"></span>
        <span class="text-[var(--accent,#60cdf9)] animate-blink">|</span>
      </p>
    ) : (
      <div class="h-10"></div>
    )}

    <p class="mt-4 text-lg text-gray-300">{subtitle}</p>

    {buttons.length > 0 && (
      <div class="mt-8 flex flex-wrap justify-center gap-4">
        {buttons.map(btn => (
          <a
            href={btn.href}
            class={`rounded-md px-5 py-3 font-medium shadow-lg transition ${btn.variant}`}
          >
            {btn.text}
          </a>
        ))}
      </div>
    )}
  </div>

  {enableEffects && (
    <script type="module">
      document.addEventListener("DOMContentLoaded", () => {
        const cvs = document.getElementById("starfield");
        if (!(cvs instanceof HTMLCanvasElement)) return;
        const ctx = cvs.getContext("2d");
        if (!ctx) return;

        // 星粒子
        let stars = [];
        function init() {
          const w = cvs.parentElement?.clientWidth || innerWidth;
          const h = cvs.parentElement?.clientHeight || innerHeight;
          cvs.width = w; cvs.height = h;
          stars = Array.from({ length: 60 }, () => ({
            x: Math.random()*w,
            y: Math.random()*h,
            r: Math.random()*1.2+0.3,
            v: Math.random()*0.15+0.05,
            hue: Math.random()*360
          }));
        }

        // 描画ループ
        function render() {
          ctx.clearRect(0, 0, cvs.width, cvs.height);
          // 通常の星
          stars.forEach(s => {
            ctx.beginPath();
            ctx.arc(s.x, s.y, s.r, 0, 2*Math.PI);
            ctx.fillStyle = `hsla(${s.hue},80%,75%,0.8)`;
            ctx.fill();
            s.y += s.v;
            if (s.y > cvs.height) {
              s.y = 0; s.x = Math.random()*cvs.width; s.hue = Math.random()*360;
            }
          });
          // 流れ星：確率 0.1
          if (Math.random() < 0.1) {
            const sx = Math.random()*cvs.width, sy = 0;
            const len = 200 + Math.random()*100, speed = 8 + Math.random()*4;
            let t = 0;
            (function shoot(){
              if (t > len) return;
              ctx.strokeStyle = '#ffffffee';
              ctx.lineWidth = 2;
              ctx.beginPath();
              ctx.moveTo(sx, sy + t);
              ctx.lineTo(sx + t/4, sy + t);
              ctx.stroke();
              t += speed;
              requestAnimationFrame(shoot);
            })();
          }

          requestAnimationFrame(render);
        }

        // タイプライター
        const texts = cvs.dataset.texts ? JSON.parse(cvs.dataset.texts) : [];
        const typedEl = document.getElementById("typed");
        let idx=0, pos=0, del=false;
        function typeLoop(){
          if (typedEl && texts.length){
            const w = texts[idx];
            typedEl.textContent = del? w.slice(0,pos--): w.slice(0,pos++);
            if (!del && pos===w.length+2) del=true;
            if (del && pos===0) { del=false; idx=(idx+1)%texts.length; }
          }
          setTimeout(typeLoop,150);
        }
        typeLoop();

        init();
        window.addEventListener("resize", init);
        render();
      });
    </script>
  )}
</section>
