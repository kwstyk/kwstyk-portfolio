---
// src/components/molecules/FilterBar.astro
import { getCollection } from 'astro:content';

// Proof の front-matter からカテゴリ一覧を取得
const allProofs    = await getCollection('proofs');
const categories   = Array.from(new Set(allProofs.map(p => p.slug.split('/')[0]))) .sort((a, b) => a.localeCompare(b));
const difficulties = ['easy', 'medium', 'hard', 'expert'];
const reproMethods = ['docker', 'terraform', 'vagrant', 'manual'].sort((a, b) => a.localeCompare(b));
---
<style>
  /* 全体：1列→2列→4列のグリッド */
  .filter-bar {
    @apply w-full bg-[#112240] p-4 rounded
           grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4;
  }

  /* 各グループを縦積み */
  .filter-group {
    @apply flex flex-col gap-1;
  }
  .filter-group span {
    @apply font-medium text-white;
  }

  /* 選択肢行は wrap 可能な横並び */
  .category-list,
  .difficulty-list,
  .repro-list {
    @apply flex flex-wrap gap-2 mt-1;
  }

  /* ボタン類 */
  .category-btn,
  .difficulty-btn {
    @apply px-2 py-1 bg-gray-600 rounded text-white cursor-pointer;
  }
  .category-btn[aria-pressed="true"],
  .difficulty-btn[aria-pressed="true"] {
    @apply bg-[var(--accent)] ring-2 ring-[var(--accent-light)];
  }

  /* チェックボックス */
  .repro-list label {
    @apply flex items-center text-white gap-1;
  }

  /* キーワード入力 */
  .keyword-wrapper {
    @apply mt-1;
  }
  .keyword-input {
    @apply w-full bg-gray-700 p-2 rounded text-white;
  }
</style>

<div id="filter-bar" class="filter-bar">
  <!-- カテゴリ -->
  <div class="filter-group">
    <span>カテゴリ:</span>
    <div class="category-list">
      {categories.map((c) => (
        <button
          type="button"
          class="category-btn"
          data-category={c}
          aria-pressed="false"
        >
          {c}
        </button>
      ))}
    </div>
  </div>

  <!-- 難易度 -->
  <div class="filter-group">
    <span>難易度:</span>
    <div class="difficulty-list">
      {difficulties.map((d) => (
        <button
          type="button"
          class="difficulty-btn"
          data-difficulty={d}
          aria-pressed="false"
        >
          {d}
        </button>
      ))}
    </div>
  </div>

  <!-- 再現方法 -->
  <div class="filter-group">
    <span>再現方法:</span>
    <div class="repro-list">
      {reproMethods.map((r) => (
        <label>
          <input type="checkbox" class="repro-chk" value={r} />
          {r}
        </label>
      ))}
    </div>
  </div>

  <!-- キーワード検索 -->
  <div class="filter-group">
    <span>キーワード:</span>
    <div class="keyword-wrapper">
      <input
        id="filter-keyword"
        type="text"
        placeholder="キーワード検索..."
        class="keyword-input"
      />
    </div>
  </div>
</div>

<script is:inline>
window.addEventListener('DOMContentLoaded', () => {
  const catBtns      = Array.from(document.querySelectorAll('button.category-btn'));
  const diffBtns     = Array.from(document.querySelectorAll('button.difficulty-btn'));
  const reproChks    = Array.from(document.querySelectorAll('input.repro-chk'));
  const keywordInput = document.getElementById('filter-keyword');
  const cards        = Array.from(document.querySelectorAll('#cards .card'));
  if (!keywordInput) return;

  // 初期クエリ q を反映
  const params = new URLSearchParams(window.location.search);
  keywordInput.value = params.get('q') || '';

  function togglePressed(btn) {
    const cur = btn.getAttribute('aria-pressed') === 'true';
    btn.setAttribute('aria-pressed', String(!cur));
  }

  function applyFilters() {
    const selCats   = catBtns.filter(b => b.getAttribute('aria-pressed') === 'true').map(b => b.dataset.category);
    const selDiffs  = diffBtns.filter(b => b.getAttribute('aria-pressed') === 'true').map(b => b.dataset.difficulty);
    const selRepros = reproChks.filter(c => c.checked).map(c => c.value);
    const keyword   = keywordInput.value.trim().toLowerCase();

    cards.forEach(card => {
      const cat   = card.dataset.category || '';
      const diff  = card.dataset.difficulty || '';
      let repro   = [];
      try { repro = JSON.parse(card.dataset.repro || '[]'); } catch {}
      const title = card.querySelector('h3')?.textContent.toLowerCase() || '';

      const okCat     = !selCats.length   || selCats.includes(cat);
      const okDiff    = !selDiffs.length  || selDiffs.includes(diff);
      const okRepro   = !selRepros.length || selRepros.some(r => repro.includes(r));
      const okKeyword = !keyword          || title.includes(keyword);

      card.style.display = (okCat && okDiff && okRepro && okKeyword) ? '' : 'none';
    });
  }

  catBtns.forEach(b => b.addEventListener('click', () => { togglePressed(b); applyFilters(); }));
  diffBtns.forEach(b => b.addEventListener('click', () => { togglePressed(b); applyFilters(); }));
  reproChks.forEach(c => c.addEventListener('change', applyFilters));
  keywordInput.addEventListener('input', function() {
    const ps = new URLSearchParams(window.location.search);
    this.value ? ps.set('q', this.value) : ps.delete('q');
    history.replaceState(null, '', `?${ps}`);
    applyFilters();
  });

  // 初回フィルタ適用
  applyFilters();
});
</script>
